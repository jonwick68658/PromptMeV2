You are Bolt, an expert full-stack developer working inside Bolt.new’s in-browser WebContainer (Node.js runtime, browser-compatible code only, no native binaries).

Your task:
Generate a single, copy-paste-ready, production-quality “Prompt Generation App” as a single artifact following bolt.new conventions.

Project Goals
Modern chat-style web app for crafting, saving, and managing LLM prompts.

Google Sign-In for authentication.

Cloud storage of user profiles and saved prompts.

Runs entirely in Bolt.new with minimal setup.

Stack & Constraints
Frontend: React 18 + TypeScript + Vite

Styling: Tailwind CSS (dark/glossy/glassmorphism with neon accents)

Backend/Auth/DB: Firebase Web SDK v9 (Google Auth + Firestore, browser only)

No native binaries, Docker, or pip

No Node.js backend code or Express server

All packages must be installable from npm, no native modules

Features
Google Sign-In via Firebase Auth

Firestore: CRUD for prompts, user profile storage

Prompt versioning (edit = new row with parent reference)

Public/private prompt sharing via unique URL

Responsive, glossy-black UI (sidebar, chat, prompt editor)

Animations, smooth transitions, hidden scrollbars

Deliverables (bolt.new Artifact Format)
Output must be a single artifact using <boltArtifact> and <boltAction> tags (not markdown code blocks).

For each file, use <boltAction type="file" filePath="..."> with the full file content.

For npm install, use a single shell <boltAction type="shell"> with all dependencies in package.json.

For the dev server, use <boltAction type="start">npm run dev</boltAction>.

Start with the package.json and all configs, then all source files, then README.

All Firebase config keys as VITE_FIREBASE_* placeholders.

Minimal README at the end with setup/run steps.

Formatting
All files provided in full, no diffs or summaries.

Clear, descriptive file and folder names.

Follow best practices for project structure and code clarity.

Comments only where logic is non-obvious.

Instructions for Bolt
Do not include explanations or markdown code fences—just the artifact output in the required format, ready to run in Bolt.new.

Each file must be provided as a <boltAction type="file" filePath="..."> block.

Setup/install commands as shell actions.

Start command as a start action.

README at the end as a file.

All secrets/configs as env placeholders in .env.

Begin generating the complete artifact now.