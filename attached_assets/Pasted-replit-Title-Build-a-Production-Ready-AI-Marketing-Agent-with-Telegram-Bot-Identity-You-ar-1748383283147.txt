replit
# Title
Build a Production-Ready AI Marketing Agent with Telegram Bot

# Identity
You are an Expert Software Developer (Editor) working inside Replit.

# Objective
Create a single-user AI agent that:
1. Uses OpenAI o3 to plan marketing and GPT-4.1 to execute tasks.
2. Automates: 
   • Email campaign creation & sending (via Gmail API)  
   • Welcome email after new lead capture  
   • Social-media post & short-form video generation  
   • Basic ad-copy generation (no campaign management yet)
3. Communicates through a Telegram bot for instructions, progress updates, and questions.

# Tech Stack
• Language: Python 3.11  
• Framework: FastAPI (async), python-telegram-bot  
• Database: PostgreSQL (create_postgresql_database_tool)  
• Task Queue: Celery + Redis (for async workloads)  
• Email: Gmail API (free within quotas)  
• AI: openai ≥1.3.8  
• Video: moviepy + imageio  
Total monthly cloud/API costs must stay ≤ $200.

# Environment & Tools
• Use Replit package manager; no pip install in bash  
• Use create_postgresql_database_tool for DB provisioning  
• Store secrets with ask_secrets (OPENAI_API_KEY, TELEGRAM_BOT_TOKEN, GMAIL_CREDENTIALS_JSON, etc.)  
• Follow all Replit operating principles and policies stated in the system prompt.

# Deliverables
1. requirements.txt / pyproject.toml with dependencies  
2. .replit & replit.nix configured for FastAPI workflow  
3. src/ directory containing:
   • main.py (FastAPI entry)  
   • bot_handler.py (Telegram logic)  
   • email_manager.py  
   • marketing_agent.py (o3 planning + 4.1 execution)  
   • tasks.py (Celery jobs)  
   • db/ models & migrations (SQLAlchemy + Alembic)  
4. README.md with setup, env vars, usage instructions  
5. Example .env.example file listing required secrets  
6. Logging & error-handling in simple language

# Milestones
1. Scaffold project & install dependencies (get user confirmation)  
2. Provision PostgreSQL DB & create basic models  
3. Implement Telegram bot skeleton & webhook  
4. Integrate Gmail API for sending emails  
5. Implement marketing_agent.py with o3 planning + 4.1 task execution  
6. Add Celery + Redis, wire async jobs  
7. Add social/video generation helpers  
8. End-to-end test, polish, document  
9. Suggest deploy when stable

# Step-by-Step Instructions
1. Plan directory structure; confirm with user.  
2. Use packager_tool to install:
   ["fastapi","uvicorn[standard]","python-telegram-bot","openai","sqlalchemy","alembic","psycopg2-binary","celery","redis","python-dotenv","moviepy","imageio"]  
3. Create basic FastAPI server in ./src/main.py listening on 0.0.0.0:$PORT.  
4. Provision PostgreSQL via create_postgresql_database_tool; set DATABASE_URL env.  
5. Build SQLAlchemy models: User, Lead, Campaign, MessageLog.  
6. Configure Alembic migrations (no destructive ops).  
7. Create Telegram bot webhook endpoints; verify with bash curl.  
8. Implement Gmail OAuth flow & email send helpers (email_manager.py).  
9. Write marketing_agent.py: 
   • plan_campaign() using o3  
   • execute_task() using 4.1  
10. Add Celery worker & Redis service; create tasks for email sending, social post generation, video rendering.  
11. Stream progress/status messages back to Telegram chat.  
12. Write README & .env.example.  
13. Ask user to test; iterate until confirmed.  
14. Call suggest_deploy tool when user is satisfied.

# Constraints
• Don’t alter DB tables outside ORM/Alembic migrations.  
• Ask permission before adding major features.  
• Use simple language when messaging the user.  
• Keep within free tiers where possible to meet <$200 budget.

# Next Action
Ask the user to confirm the tech stack & milestones, then begin Milestone 1.